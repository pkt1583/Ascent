openapi: 3.0.0
info:
  title: Control Plane - OpenAPI 3.0
  description: |-
    This is a  Control Plane API Documentation based on the OpenAPI 3.0 specification.
  version: 0.0.1

servers:
  - url: https://controlplane.test.io/api/v1

paths:
  /clusters:
    get:
      tags:
        - Clusters
      summary: Retrieve all available clusters
      security:
        - OAuth2: [admin]
      operationId: listClusters
      parameters:
        - required: false
          description: filter Condition for applying filters to the query
          schema:
            type: string
          name: filter
          in: query
      responses:
        "200":
          description: A list of available clusters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClusterListResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
    post:
      tags:
        - Clusters
      summary: Create a new cluster
      operationId: createCluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClusterRequest"
      responses:
        "201":
          description: The created cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "409":
          description: If the Cluster already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "422":
          description: If Request Validation Fails for the Payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
  /clusters/{clusterId}:
    get:
      tags:
        - Clusters
      summary: Retrieve a specific cluster
      operationId: getCluster
      parameters:
        - name: clusterId
          in: path
          required: true
          description: The ID of the cluster to retrieve
          schema:
            type: string
      responses:
        "200":
          description: The requested cluster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterResponse"
        "404":
          description: The requested cluster was not found
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "422":
          description: If Request Validation Fails for the Payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
  /applications:
    get:
      tags:
        - Applications
      summary: Retrieve all available Applications
      operationId: listApplications
      parameters:
        - required: false
          description: filter Condition for applying filters to the query
          schema:
            type: string
          name: filter
          in: query
      responses:
        "200":
          description: A list of available Applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApplicationResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
    post:
      tags:
        - Applications
      summary: Create a new Applications
      operationId: createApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationRequest"
      responses:
        "201":
          description: The created Application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "409":
          description: If the Application already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "422":
          description: If Request Validation Fails for the Payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
  /applications/{applicationId}:
    get:
      tags:
        - Applications
      summary: Retrieve a specific Application
      operationId: getApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The ID of the Application to retrieve
          schema:
            type: string
      responses:
        "200":
          description: The requested Application
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponse"
        "404":
          description: The requested Application was not found
  /applications/{application_id}/config:
    get:
      tags:
        - Applications
      summary: Get all Config objects
      description: |-
        Get all Configs for the application

        Returns:
            List[ConfigListResponse]
      operationId: get_all_configs
      parameters:
        - required: true
          schema:
            title: Application Id
            type: string
          name: application_id
          in: path
        - required: false
          schema:
            title: Query
            type: string
          name: query
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigListResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: Internal Server Error
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
    put:
      tags:
        - Applications
      summary: Creates or replaces a Config object
      description: |-
        Creates or replaces a Config

        Returns:
            ConfigResponse: The created or replaced Config
      operationId: put_config
      parameters:
        - required: true
          schema:
            title: Application Id
            type: string
          name: application_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigRequest"
        required: true
      responses:
        "201":
          description: The created Config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "404":
          description: If the application or cluster is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "422":
          description: If Request Validation Fails for the Payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: Internal Server Error
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
    patch:
      tags:
        - Applications
      summary: Updates an existing Config object
      description: |-
        Updates an existing Config object

        Returns:
            ConfigResponse: The updated config
      operationId: patch_config
      parameters:
        - required: true
          schema:
            title: Application Id
            type: string
          name: application_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigResponse"
        "404":
          description: If the application, cluster or config is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: Internal Server Error
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
  /applications/{application_id}/config/{config_id}:
    get:
      tags:
        - Applications
      summary: Gets a Config object by it's id
      description: |-
        Gets a Config by it's id 

        Args:
            id (str)

        Raises:
            HTTPException

        Returns:
            ConfigResponse
      operationId: get_config_by_id
      parameters:
        - required: true
          schema:
            title: Application Id
            type: string
          name: application_id
          in: path
        - required: true
          schema:
            title: Config Id
            type: string
          name: config_id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigResponse"
        "404":
          description: The requested configmap was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: Internal Server Error
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
  /target_policies:
    get:
      tags:
        - TargetPolicies
      summary: Retrieve all available target_policies
      operationId: listtarget_policies
      parameters:
        - required: false
          description: filter Condition for applying filters to the query
          schema:
            type: string
          name: filter
          in: query
      responses:
        "200":
          description: A list of available target_policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TargetPolicyResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
    post:
      tags:
        - TargetPolicies
      summary: Create a new TargetPolicy
      operationId: createTargetPolicy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TargetPolicyRequest"
      responses:
        "201":
          description: The created TargetPolicy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetPolicyResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "409":
          description: if the TargetPolicy already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "422":
          description: If Request Validation Fails for the Payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
  "/v1/targetpolicies/{app_name}":
    get:
      tags:
      - TargetPolicies
      summary: Get effective Target Policies of application
      description: |-
        Get TargetPolicies Based on app_name and cluster_metadata
        Args:
            app_name  (str): Name of application
            cluster_name  (str, optional): Query to filter TargetPolicies based on cluster name.
            user (User, optional): user (expected role - reader)
        Returns:
            TargetPolicyListResponse: List of TargetPolicies
      operationId: get_effective_target_policies_of_app_v1_targetpolicies__app_name__get
      parameters:
      - required: true
        schema:
          title: App Name
          type: string
        name: app_name
        in: path
      - required: false
        schema:
          title: Cluster Name
          type: string
        name: cluster_name
        in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TargetPolicyResponse"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProblemDetails"
  /namespaces:
    get:
      tags:
        - Namespaces
      summary: Retrieve all available namespaces
      operationId: listNamespaces
      responses:
        "200":
          description: A list of available namespaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NamespaceListResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
    post:
      tags:
        - Namespaces
      summary: Create a new Namespace
      operationId: createNamespace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NamespaceRequest"
      responses:
        "201":
          description: The created Namespace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceResponse"
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "409":
          description: If the Namespace already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "422":
          description: If Request Validation Fails for the Payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
  /namespaces/{namespaceId}:
    get:
      tags:
        - Namespaces
      summary: Retrieve a specific namespace
      operationId: getNamespace
      parameters:
        - name: namespaceId
          in: path
          required: true
          description: The ID of the namespace to retrieve
          schema:
            type: string
      responses:
        "200":
          description: The requested namespace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceResponse"
        "404":
          description: The requested namespace was not found
        "400":
          description: If the request is not well formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "403":
          description: If the user is not authorized to perform this query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "422":
          description: If Request Validation Fails for the Payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
          x-ms-error-response: true
        "500":
          description: Internal Server Error
          x-ms-error-response: true
        "503":
          description:
            If the API service or one of its downstream dependencies is
            temporary unavailable
          x-ms-error-response: true
components:
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
  schemas:
    Metadata:
      type: object
    ClusterRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the cluster
        description:
          type: string
          description: A description of the cluster
        short_name:
          type: string
          description: A description of the cluster
        metadata:
          $ref: "#/components/schemas/Metadata"
    ClusterResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the cluster
        name:
          type: string
          description: The name of the cluster
        description:
          type: string
          description: A description of the cluster
        short_name:
          type: string
          description: A description of the cluster
        environment:
          type: string
          description: Name of environment
        created_by:
          type: string
          description: details of user who created the cluster
        updated_by:
          type: string
          description: details of user who updated the cluster
        created_on:
          type: number
          description: created date epoch
        updated_on:
          type: number
          description: updated date epoch
        metadata:
          $ref: "#/components/schemas/Metadata"
    ClusterListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ClusterResponse"
          minItems: 1
          maxItems: 20
          description: The list of Clusters
      additionalProperties: false
      description: A wrapper for the list of Clusters
    ApplicationRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the application
        description:
          type: string
          description: A description of the application
        namespace:
          type: string
          description: The namespace of the application
        repo_url:
          type: string
          description: The repo URL of the application
        repo_branch:
          type: string
          description: The repo Branch of the application
        repo_path:
          type: string
          description: The repo Path of the application
        metadata:
          $ref: "#/components/schemas/Metadata"
    ApplicationResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the cluster
        name:
          type: string
          description: The name of the cluster
        description:
          type: string
          description: A description of the cluster
        namespace:
          type: string
          description: The namespace of the application
        repo_url:
          type: string
          description: The repo URL of the application
        repo_branch:
          type: string
          description: The repo Branch of the application`
        repo_path:
          type: string
          description: The repo Path of the application
        created_by:
          type: string
          description: details of user who created the cluster
        updated_by:
          type: string
          description: details of user who updated the cluster
        created_on:
          type: number
          description: created date epoch
        updated_on:
          type: number
          description: updated date epoch
        metadata:
          $ref: "#/components/schemas/Metadata"
    TargetPolicyRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the TargetPolicy
        description:
          type: string
          description: A description of the TargetPolicy
        app_selector:
          $ref: "#/components/schemas/Metadata"
        cluster_selector:
          $ref: "#/components/schemas/Metadata"
    TargetPolicyResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the TargetPolicy
        name:
          type: string
          description: The name of the TargetPolicy
        description:
          type: string
          description: A description of the TargetPolicy
        created_by:
          type: string
          description: details of user who created the TargetPolicy
        updated_by:
          type: string
          description: details of user who updated the TargetPolicy
        created_on:
          type: number
          description: created date epoch
        updated_on:
          type: number
          description: updated date epoch
        app_selector:
          $ref: "#/components/schemas/Metadata"
        cluster_selector:
          $ref: "#/components/schemas/Metadata"
    NamespaceRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the Namespace
        description:
          type: string
          description: A description of the Namespace
        cost_center:
          type: string
          description: cost centers
        group:
          type: array
          description: Group names of the team owning this namespace
    NamespaceResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the Namespace
        name:
          type: string
          description: The name of the Namespace
        description:
          type: string
          description: A description of the Namespace
        cost_center:
          type: string
          description: cost centers
        group:
          type: array
          description: Group names of the team owning this namespace
        created_by:
          type: string
          description: details of user who created the Namespace
        updated_by:
          type: string
          description: details of user who updated the Namespace
        created_on:
          type: number
          description: created date epoch
        updated_on:
          type: number
          description: updated date epoch
    NamespaceListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/NamespaceResponse"
          minItems: 1
          maxItems: 20
          description: The list of Clusters
      additionalProperties: false
      description: A wrapper for the list of Clusters
    ProblemDetails:
      type: object
      properties:
        errorCode:
          description: An application-specific error code, expressed as a string value.
          type: string
        errorDescription:
          description:
            A human-readable explanation specific to this occurrence of
            the problem. Like title, this field's value can be localized.
          type: string
        errorDetails:
          type: array
          items:
            type: object
            properties:
              propertyName:
                description: name of the field in the request which has the error
                type: string
              propertyError:
                description: the error associated  property
                type: string
    ConfigListResponse:
      title: ConfigListResponse
      type: object
      properties:
        items:
          title: Items
          type: array
          items:
            $ref: "#/components/schemas/ConfigResponse"
          description: The list of Configmaps
      additionalProperties: false
    ConfigRequest:
      title: ConfigRequest
      required:
        - cluster_selector
        - config_name
        - type
        - data
      type: object
      properties:
        cluster_selector:
          title: Cluster Selector
          $ref: "#/components/schemas/Metadata"
          description: The complete name of the cluster
        config_name:
          title: Config Name
          type: string
          description: The name of the configuration
        type:
          allOf:
            - $ref: "#/components/schemas/ConfigType"
          description: The type of the configuration to be created
        data:
          title: Data
          type: object
          description: Actual configuration contents
    ConfigResponse:
      title: ConfigResponse
      required:
        - app_id
        - cluster_name
        - data
        - config_name
        - type
      type: object
      properties:
        _id:
          title: " Id"
          type: string
          description: The unique identifier for the configmap
        app_id:
          title: App Id
          type: string
          description: The unique identifier for the application to which this configmap belongs
        cluster_name:
          title: Cluster Metadata
          $ref: "#/components/schemas/Metadata"
          description: The metdata of the cluster
        config_name:
          title: Config Name
          type: string
          description: The name of the configuration
        type:
          allOf:
            - $ref: "#/components/schemas/ConfigType"
          description: The type of the configuration to be created
        created_by:
          title: Created By
          type: string
          description: details of user who created the cluster
        updated_by:
          title: Updated By
          type: string
          description: details of user who updated the cluster
        created_on:
          title: Created On
          type: number
          description: created date epoch
        updated_on:
          title: Updated On
          type: number
          description: updated date epoch
        data:
          title: Data
          type: object
          description: Actual configuration contents
    ConfigType:
      title: ConfigType
      enum:
        - SPECIFIC
        - BASE
      description: An enumeration.
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://controlplane.localhost/oauth/authorize
          tokenUrl: https://controlplane.localhost/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
